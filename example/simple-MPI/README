
This example shows how to use KGEN to extract a kernel from a simple Fortran MPI application.

[ Prerequisites ]
	1. Python Version >= 2.7
	2. cpp or fpp preprocessor
	3. make
	4. MPI library of your choice

[ Kernel extraction steps ]

	1. Modify Makefile
	   You may need to modify Makefile to apply your MPI library to be used and compiler environment correctly.

       >> vi Makefile; # Modify names of Makefile in src subfolder, MPI_INC and FC if required

	2. Modify or create Makefile and job submission script for using your MPI library
       >> vi src/Makefile.mpirun or src/Makefile.lsf or create your own Makefile
       >> vi src/job.lsf or create your own job submission script

	3. Modify include.ini
       >> vi include.ini; # Modify path to MPI include path

	4. >> make; # extract a kernel

	Once "make" is completed with success, you will see information similar to next lines on screen
	Note that Makefile.mpirun in src subfolder is used in this example. 

		../../bin/kgen \
				-D ROW=4,COL=4 \
				-i include.ini \
				-I ${KGENHOME}/example/simple-MPI/src:${MPI_INC}/include \
				--mpi enable \
				--invocation 0:0:1,0:0:3,1:0:1,1:0:3 \
				--kernel-compile FC='mpiifort' \
				--timing repeat=1000 \
				--state-build cmds="cd ${KGENHOME}/example/simple-MPI/src; make -f Makefile.mpirun build FC='mpiifort'" \
				--state-run cmds="cd ${KGENHOME}/example/simple-MPI/src; make -f Makefile.mpirun run" \
				${KGENHOME}/example/simple-MPI/src/update_mod.F90:update_mod:update:calc

		Pre-processing is done
		Reading /glade/u/home/youngsun/repos/github/KGen/example/simple-MPI/src/update_mod.F90
		Reading /glade/u/home/youngsun/repos/github/KGen/example/simple-MPI/src/calc_mod.F90
			in the search of "calc" directly from update_mod.F90 and originally from update_mod.F90
		Program is analyzed
		Makefiles are generated
		Post-processing is done
		Completed.

	After this step, two subfolders(kernel and state) will be created under this folder.

	5. >> cd state; # move to a directory for instrumentation files

	6. >> make; # generate state data files

	In this step, original application will be built/run again with instrumented files in state folder

	Once "make" is completed with success, you will see information similar to next lines on screen

		if [ ! -f ${KGENHOME}/example/simple-MPI/src/update_mod.F90.kgen_org ]; then cp -f ${KGENHOME}/example/simple-MPI/src/update_mod.F90 ${KGENHOME}/example/simple-MPI/src/update_mod.F90.kgen_org; fi
		if [ ! -f update_mod.F90.kgen_org ]; then cp -f ${KGENHOME}/example/simple-MPI/src/update_mod.F90 update_mod.F90.kgen_org; fi
		#rm -f kernel.exe *.mod *.o
		cp -f update_mod.F90 ${KGENHOME}/example/simple-MPI/src/update_mod.F90
		cd ${KGENHOME}/example/simple-MPI/src; make -f Makefile.mpirun build FC='mpiifort'
		make[1]: Entering directory `${KGENHOME}/example/simple-MPI/src'
		mpiifort -c -o calc_mod.o calc_mod.F90
		mpiifort -DROW=4 -DCOL=4 -c -o update_mod.o update_mod.F90
		mpiifort -c -o program.o program.F90
		mpiifort -o demo.exe program.o update_mod.o calc_mod.o
		make[1]: Leaving directory `${KGENHOME}/example/simple-MPI/src'
		mv -f ${KGENHOME}/example/simple-MPI/src/update_mod.F90.kgen_org ${KGENHOME}/example/simple-MPI/src/update_mod.F90
		cd ${KGENHOME}/example/simple-MPI/src; make -f Makefile.mpirun run
		make[1]: Entering directory `${KGENHOME}/example/simple-MPI/src'
		mpirun -n 4 ./demo.exe
		 Collected Kernel Input/Ouput state from:            0           0           1
		 Collected Kernel Input/Ouput state from:            1           0           1
		 Collected Kernel Input/Ouput state from:            0           0           3
		 Collected Kernel Input/Ouput state from:            1           0           3
		forrtl: No such file or directory
		 Stopping application...
		forrtl: severe (28): CLOSE error, unit -141, file "Unknown"
		Image              PC                Routine            Line        Source             
		demo.exe           000000000047E93A  Unknown               Unknown  Unknown
		demo.exe           000000000047D436  Unknown               Unknown  Unknown
		demo.exe           000000000043E100  Unknown               Unknown  Unknown
		demo.exe           000000000041476E  Unknown               Unknown  Unknown
		demo.exe           0000000000413CAF  Unknown               Unknown  Unknown
		demo.exe           000000000040B3F6  Unknown               Unknown  Unknown
		demo.exe           000000000040AEB3  Unknown               Unknown  Unknown
		demo.exe           0000000000409DCE  Unknown               Unknown  Unknown
		demo.exe           0000000000408721  Unknown               Unknown  Unknown
		demo.exe           000000000040868C  Unknown               Unknown  Unknown
		libc.so.6          0000003101E1ED5D  Unknown               Unknown  Unknown
		demo.exe           0000000000408589  Unknown               Unknown  Unknown
		APPLICATION TERMINATED WITH THE EXIT STRING: Hangup (signal 1)
		make[1]: *** [run] Error 1
		make[1]: Leaving directory `/glade/u/home/youngsun/repos/github/KGen/example/simple-MPI/src'
		make: *** [run] Error 2

		Note that multiple errors are shown above result. This is expected outcome and a future version of KGEN would implement a more graceful termination of application.

	7. >> cd ../kernel; # move to a kernel directory

	8. >> make; # build and run a kernel

	In this step, the generated kernel will be built/run and verfication and timing information will be displayed on screen.

		true; ifort  -c -o kgen_utils.o kgen_utils.f90
		true; ifort  -c -o calc_mod.o calc_mod.F90
		true; ifort  -c -o update_mod.o update_mod.F90
		true; ifort  -c -o kernel_driver.o kernel_driver.f90
		true; ifort    -o kernel.exe update_mod.o calc_mod.o kernel_driver.o kgen_utils.o
		true; ./kernel.exe
		 
		 ***************** Verification against 'calc.0.0.1' *****************
		 
		 Number of verified variables:            1
		 Number of identical variables:            1
		 Number of non-identical variables within tolerance:            0
		 Number of non-identical variables out of tolerance:            0
		 Tolerance:   1.000000000000000E-014
		 
		 Verification PASSED
		 
		 calc : Time per call (usec):   6.200000178068876E-003
		 
		 ***************** Verification against 'calc.0.0.3' *****************
		 
		 Number of verified variables:            1
		 Number of identical variables:            1
		 Number of non-identical variables within tolerance:            0
		 Number of non-identical variables out of tolerance:            0
		 Tolerance:   1.000000000000000E-014
		 
		 Verification PASSED
		 
		 calc : Time per call (usec):   5.400000140070915E-003
		 
		 ***************** Verification against 'calc.1.0.1' *****************
		 
		 Number of verified variables:            1
		 Number of identical variables:            1
		 Number of non-identical variables within tolerance:            0
		 Number of non-identical variables out of tolerance:            0
		 Tolerance:   1.000000000000000E-014
		 
		 Verification PASSED
		 
		 calc : Time per call (usec):   5.299999844282866E-003
		 
		 ***************** Verification against 'calc.1.0.3' *****************
		 
		 Number of verified variables:            1
		 Number of identical variables:            1
		 Number of non-identical variables within tolerance:            0
		 Number of non-identical variables out of tolerance:            0
		 Tolerance:   1.000000000000000E-014
		 
		 Verification PASSED
		 
		 calc : Time per call (usec):   5.499999970197678E-003
		 
		****************************************************
				  kernel execution summary: calc
		****************************************************
			Total number of verification cases  :     4
			Number of verification-passed cases :     4
		 
			Average call time (usec):  0.560E-02
			Minimum call time (usec):  0.530E-02
			Maximum call time (usec):  0.620E-02
		****************************************************
